{"version":3,"sources":["components/WeatherCard.js","components/WeatherContainer.js","components/HeaderApp.js","pages/TheApp.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["WeatherCard","props","className","temperatureDeg","timeOfDay","src","iconId","alt","temperatureFeel","humidity","wind","description","api","process","WeatherContainer","state","data","componentDidMount","getWeather","a","fetch","res","json","setState","list","console","log","this","length","style","textAlign","map","el","index","key","weather","icon","dt_txt","split","Math","ceil","main","temp","floor","feels_like","speed","size","Component","HeaderApp","time","Date","getCurrentWeather","top","toLocaleTimeString","toLocaleDateString","TheApp","About","href","target","rel","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.25744f61.chunk.js","sourcesContent":["import React from \"react\";\n\nconst WeatherCard = props => {\n  return (\n    <div className=\"weather-card-box\">\n      <h3>\n        <span>{props.temperatureDeg}째C</span> at <span>{props.timeOfDay}</span>\n      </h3>\n      <img\n        src={`http://openweathermap.org/img/wn/${props.iconId}@2x.png`}\n        alt=\"\"\n      />\n      <h4>\n        Feels like:<span> {props.temperatureFeel}째C</span>\n      </h4>\n      <h4>\n        Humidity:<span> {props.humidity}%</span>\n      </h4>\n      <h4>\n        Wind: <span>{props.wind}m/s</span>\n      </h4>\n      <h4>\n        Sky: <span>{props.description}</span>\n      </h4>\n    </div>\n  );\n};\n\nexport default WeatherCard;\n","import React, { Component } from \"react\";\nimport WeatherCard from \"./WeatherCard\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst api = {\n  key: process.env.REACT_APP_API_KEY,\n  baseUrl: process.env.REACT_APP_API_URL\n};\n\nexport default class WeatherContainer extends Component {\n  state = {\n    data: []\n  };\n\n  componentDidMount = () => {\n    this.getWeather();\n  };\n\n  getWeather = async () => {\n    const res = await fetch(\n      `${api.baseUrl}forecast?q=Copenhagen&units=metric&cnt=5&appid=${api.key}`\n    );\n    const data = await res.json();\n    this.setState(\n      {\n        data: data.list\n      },\n      () => {\n        console.log(data);\n      }\n    );\n  };\n\n  render() {\n    const { data } = this.state;\n    if (data.length > 0) {\n      return (\n        <div style={{ textAlign: \"center\" }}>\n          <h2>Later today</h2>\n          <div className=\"weather-card-container\">\n            {this.state.data.map((el, index) => {\n              return (\n                <WeatherCard\n                  key={index}\n                  iconId={el.weather[0].icon}\n                  timeOfDay={\n                    data[index].dt_txt.split(\" \")[1].split(\":\")[0] +\n                    \":\" +\n                    data[index].dt_txt.split(\" \")[1].split(\":\")[1]\n                  }\n                  temperatureDeg={Math.ceil(data[index].main.temp)}\n                  temperatureFeel={Math.floor(data[index].main.feels_like)}\n                  humidity={data[index].main.humidity}\n                  wind={data[index].wind.speed}\n                  description={data[index].weather[0].main}\n                />\n              );\n            })}\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"weather-loading\">\n          <ClipLoader size={50} />\n        </div>\n      );\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst api = {\n  key: process.env.REACT_APP_API_KEY,\n  baseUrl: process.env.REACT_APP_API_URL\n};\n\nexport default class HeaderApp extends Component {\n  state = {\n    data: null,\n    time: new Date(),\n    iconId: \"\"\n  };\n  componentDidMount = () => {\n    this.getCurrentWeather();\n  };\n\n  getCurrentWeather = async () => {\n    const res = await fetch(\n      `${api.baseUrl}weather?q=Copenhagen&units=metric&appid=${api.key}`\n    );\n    const data = await res.json();\n    this.setState({\n      data: data,\n      iconId: data.weather[0].icon\n    });\n  };\n\n  render() {\n    const top = (\n      <div className=\"location-right\">\n        <h1>Copenhagen,DK</h1>\n        <h3 className=\"time\">\n          Local time:{\" \"}\n          <span>\n            {this.state.time.toLocaleTimeString().split(\":\")[0]}\n            <span className=\"blink-effect\">:</span>\n            {this.state.time.toLocaleTimeString().split(\":\")[1]}\n          </span>\n        </h3>\n        <h4 className=\"date\">\n          Date: <span>{this.state.time.toLocaleDateString()}</span>\n        </h4>\n      </div>\n    );\n\n    const { data } = this.state;\n    if (data) {\n      return (\n        <div className=\"location-box\">\n          {top}\n          <div className=\"location-left\">\n            <h3>\n              Now: <span>{Math.ceil(data.main.temp)}째C</span>\n            </h3>\n            <h4>\n              Feels like:<span> {Math.floor(data.main.feels_like)}째C</span>\n            </h4>\n            <img\n              src={`http://openweathermap.org/img/wn/${this.state.iconId}@2x.png`}\n              alt=\"\"\n            />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"location-box\">\n          {top}\n          <div className=\"location-left weather-load\">\n            <ClipLoader size={50} />\n          </div>\n        </div>\n      );\n    }\n  }\n}\n","import React from \"react\";\nimport WeatherContainer from \"./../components/WeatherContainer\";\nimport HeaderApp from \"./../components/HeaderApp\";\n\nexport default function TheApp() {\n  return (\n    <div className=\"container\">\n      <HeaderApp />\n      <WeatherContainer />\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function About() {\n  return (\n    <div className=\"about\">\n      <h3>\n        This is a weather app that shows the current weather and time in\n        Copenhagen, Denmark.\n      </h3>\n      <h3>The app is built in ReactJS with React Router and FetchAPI.</h3>\n      <h3>\n        The data is fetched asyncronous from{\" \"}\n        <a\n          href=\"https://openweathermap.org/current\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          OpenWeatherMap API\n        </a>\n        .\n      </h3>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport TheApp from \"./pages/TheApp\";\nimport About from \"./pages/About\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <nav>\n            <ul>\n              <Link to={process.env.PUBLIC_URL}>Weather</Link>\n            </ul>\n            <ul>\n              <Link to=\"/about\">About</Link>\n            </ul>\n            <ul>\n              <a\n                href=\"https://github.com/canyouseethroughme/weather-app\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                GitHub\n              </a>\n            </ul>\n          </nav>\n          <Switch>\n            <Route exact path=\"/\">\n              <TheApp />\n            </Route>\n            <Route path=\"/about\" component={() => <About />}></Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}